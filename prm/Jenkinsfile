pipeline {
    agent { label 'mesos' }
    environment {
        PLAYBOOK='prm/owca/workloads/run_workloads.yaml'
        INVENTORY='prm/demo_scenarios/common/inventory.yaml'
        LLC_INVENTORY='prm/demo_scenarios/complex_llc.0/inventory.yaml'
        MEMBW_INVENTORY='prm/demo_scenarios/complex_mbw.0/inventory.yaml'
        PROMETHEUS='http://100.64.176.12:9090' 
        MESOS_MASTER_HOST='100.64.176.23'
        LLC_LABELS="{additional_labels: {build_number: \"${BUILD_NUMBER}\", build_node_name: \"${NODE_NAME}\", build_commit: \"${GIT_COMMIT}\", scenario: \"complex_llc.0\"}}"
        MBW_LABELS="{additional_labels: {build_number: \"${BUILD_NUMBER}\", build_node_name: \"${NODE_NAME}\", build_commit: \"${GIT_COMMIT}\", scenario: \"complex_mbw.0\"}}"
    }
    options {
        disableConcurrentBuilds()
        timeout(time: 5, unit: 'MINUTES')
    }
    parameters {
        booleanParam(name: 'REDEPLOY_PEX', defaultValue: false, description: 'Redeploy pex this value')
        booleanParam(name: 'LLC', defaultValue: true, description: 'Run LLC experiment')
        booleanParam(name: 'MB', defaultValue: false, description: 'Run LLC experiment')
    }
    stages {
        stage('Redeploy pex') {
            when {
                expression { return params.REDEPLOY_PEX }
            }
            stages {
                stage("Prepare venv") {
                    steps {
                        dir('prm') {
                            sh('make venv')
                            sh('make check')
                        }
                    }
                }
                stage("Build owca-prm.pex") {
                    steps {
                        dir('prm') {
                            sh('make package')
                        }
                    }
                }
                stage("Restart owca service") {
                    steps {
                        sh'''
                        sudo cp ${WORKSPACE}/prm/demo_scenarios/common/threshold.json /var/lib/owca/
                        sudo cp ${WORKSPACE}/prm/demo_scenarios/common/workload.json /var/lib/owca/
                        sudo cp ${WORKSPACE}/prm/demo_scenarios/common/owca_config.yml /etc/owca/
                        sudo cp ${WORKSPACE}/prm/dist/owca-prm.pex /usr/bin/
                        sudo systemctl restart owca
                        '''
                        sleep 5
                        sh 'sudo systemctl status owca'
                    }
                }
            }
        }
        stage("Prepare aurora cluster") {
            when { expression { return params.MB | params.LLC} }
            steps {
                sh'''
                mkdir -p ${HOME}/.aurora
                cp ${WORKSPACE}/prm/demo_scenarios/common/aurora-clusters.json  ${HOME}/.aurora/clusters.json
                '''
            }
        }
        stage("Run LLC experiment") {
            when {
                expression { return params.LLC }
            }
            environment {
                MESOS_EXPECTED_TASKS = 15
            }
            steps {
                dir('prm/owca/workloads'){
                    echo 'Start baseline workloads.'
                    sh 'ansible-playbook -v -i ${WORKSPACE}/${LLC_INVENTORY} -i ${WORKSPACE}/${INVENTORY} --tags=twemcache_mutilate,redis_rpc_perf,cassandra_stress--cassandra -e "${LLC_LABELS}" ${WORKSPACE}/${PLAYBOOK}' 
                    sleep 15
                    echo 'Start contender workload.'
                    sh 'ansible-playbook -v -i ${WORKSPACE}/${LLC_INVENTORY} -i ${WORKSPACE}/${INVENTORY} --tags=cassandra_stress--stress -e "${LLC_LABELS}" ${WORKSPACE}/${PLAYBOOK}'
                    sleep 15
                }
                dir('prm'){
                    echo "Calculate LLC results for ${BUILD_NUMBER}."
                    sh 'pipenv run pytest test_calculate_accuracy.py --junitxml=unit_results.xml --junit-prefix=llc --log-level=debug'
                    // Plot perfomrance data
                    plot(csvFileName: 'plot-32d91d63-10d3-4d8e-aeb7-8de5f116346f.csv', 
                         csvSeries: [[displayTableFlag: true, exclusionValues: '', file: 'test_results.csv', inclusionFlag: 'OFF', url: '']], 
                         group: 'PRM performance', 
                         style: 'line', 
                         title: 'Precision & Recall')
                }
            }
            post {
                always {
                    echo 'Stop all workloads.'
                    sh 'ansible-playbook -v -i ${WORKSPACE}/${INVENTORY} --tags=clean_jobs ${WORKSPACE}/${PLAYBOOK}'
                    echo 'Storing LLC results.'
                    junit 'prm/unit_results.xml'

                }
            }
        }
        // stage("Run Memory Bandwidth experiment") {
        //     when {
        //         expression { return params.MB }
        //     }
        //     steps {
        //         dir('prm/owca/workloads'){
        //             echo 'Start baseline workloads.'
        //             sh 'ansible-playbook -v -i ${WORKSPACE}/${MEMBW_INVENTORY} -i ${WORKSPACE}/${INVENTORY} --tags=specjbb,tensorflow_benchmark_prediction,tensorflow_benchmark_train,cassandra_stress -e "${MBW_LABELS}" ${WORKSPACE}/${PLAYBOOK}' 
        //             sleep 30
        //             echo 'Start contender workload.'
        //             sh 'ansible-playbook -v -i ${WORKSPACE}/${MEMBW_INVENTORY} -i ${WORKSPACE}/${INVENTORY} --tags=tensorflow_benchmark_prediction--stress -e "${MBW_LABELS}" ${WORKSPACE}/${PLAYBOOK}'
        //             sleep 30
        //
        //         }
        //         dir('prm'){
        //             echo "Calculate MBW results for ${BUILD_NUMBER}."
        //             sh 'pipenv run pytest test_calculate_accuracy.py --junitxml=unit_results.xml --junit-prefix=mbw --log-level=debug'
        //         }
        //     }
        //     post {
        //         always {
        //             echo 'Stop all workloads.'
        //             sh 'ansible-playbook -v -i ${WORKSPACE}/${INVENTORY} --tags=clean_jobs ${WORKSPACE}/${PLAYBOOK}'
        //             echo 'Storing MBW results.'
        //             junit 'prm/unit_results.xml'
        //         }
        //     }
        // }
        stage("Clean all jobs") {
            when { expression { return params.MB | params.LLC} }
            steps {
                dir('prm/owca/workloads') {
                    sh 'ansible-playbook -v -i ${WORKSPACE}/${INVENTORY} --tags=clean_jobs ${WORKSPACE}/${PLAYBOOK}'
                }
            }
        }
    }
}
