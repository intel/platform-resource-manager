pipeline {
//    triggers {
//        cron('H/30 * * * *')
//    }
    agent { label 'mesos' }
    environment {
        PLAYBOOK='prm/workload-collocation-agent/workloads/run_workloads.yaml'
        INVENTORY='prm/demo_scenarios/common/inventory.yaml'
        PROMETHEUS='http://100.64.176.12:9090' 
        MESOS_MASTER_HOST='100.64.176.23'
        LLC_BASELINE_SLEEP = 180 
        LLC_COLLECT_SLEEP = 36000
        LLC_CONTENDER_SLEEP = 180
        MBW_BASELINE_SLEEP = 5
        MBW_CONTENDER_SLEEP = 5
        BUILD_COMMIT = "${GIT_COMMIT}"
        EXTRA_ANSIBLE_PARAMS = ""
    }
    options {
        disableConcurrentBuilds()
        timeout(time: 1200, unit: 'MINUTES')
    }
    parameters {
        booleanParam(name: 'BUILD_PEX', defaultValue: true, description: 'Build wca-pex')
        booleanParam(name: 'LLC', defaultValue: true, description: 'Run LLC experiment')
        booleanParam(name: 'BUILD_LLC_MODEL', defaultValue: false, description: 'Build Model For LLC Contention')
        booleanParam(name: 'MB', defaultValue: false, description: 'Run MBW experiment')
    }
    stages {
        stage('Build pex') {
            when { expression { return params.BUILD_PEX } }
            stages {
                stage("Prepare venv && build pex") {
                    steps {
                        build_pex()
                        }
                    }
                }
            }
        stage("Prepare aurora cluster") {
            when { expression { return params.MB | params.LLC} }
            steps {
                sh'''
                mkdir -p ${HOME}/.aurora
                cp ${WORKSPACE}/prm/demo_scenarios/common/aurora-clusters.json  ${HOME}/.aurora/clusters.json
                '''
            }
        }

        stage("Run LLC Metrics Collection") {
            when { expression { return params.BUILD_LLC_MODEL } }
            environment {
                MESOS_EXPECTED_TASKS = -1
                BUILD_SCENARIO = "llc"
                SCENARIO_INVENTORY='prm/demo_scenarios/complex_llc.0/inventory.yaml'
                LABELS="{additional_labels: {build_number: \"${BUILD_NUMBER}\", build_node_name: \"${NODE_NAME}\", build_commit: \"${GIT_COMMIT}\", build_scenario: \"$BUILD_SCENARIO\"}}"
            }
            steps {
                reconfigure_wca()
                start_wca()
                echo 'Start baseline workloads.'
                start_workloads("twemcache_mutilate,redis_rpc_perf,cassandra_stress--cassandra", "${LLC_COLLECT_SLEEP}")
                stop_workloads()
            }
            post {
                always {
                    stop_workloads()
                    stop_wca()
                }
            }
        }

        stage("Run LLC experiment") {
            when { expression { return params.LLC } }
            environment {
                MESOS_EXPECTED_TASKS = -1
                MIN_RECALL = -1
                MIN_PRECISION = -1
                BUILD_SCENARIO = "llc"
                LABELS="{additional_labels: {build_number: \"${BUILD_NUMBER}\", build_node_name: \"${NODE_NAME}\", build_commit: \"${GIT_COMMIT}\", build_scenario: \"$BUILD_SCENARIO\"}}"
                SCENARIO_INVENTORY='prm/demo_scenarios/complex_llc.0/inventory.yaml'
            }
            steps {
                reconfigure_wca()
                start_wca()
                dir('prm/workload-collocation-agent/workloads'){
                    sh 'sed -i s/number_of_rows=100000$/number_of_rows=10000/g ./cassandra_stress/cassandra_stress.aurora'
                    sh 'sed -i s/40000/2000/g ./mutilate/mutilate.aurora'
                    sh 'sed -i s/-C\\ %d\\;/-C\\ %d\\ -R\\ 2000\\;/g ./mutilate/mutilate.aurora'
                    echo 'Start baseline workloads.'
                    start_workloads("twemcache_mutilate,redis_rpc_perf,cassandra_stress--cassandra", "${LLC_BASELINE_SLEEP}")
                    echo 'Start contender workload.'
                    start_workloads("cassandra_stress--stress", "${LLC_CONTENDER_SLEEP}")
                    stop_workloads()
                }
                calculate_precision()
            }
            post {
                always {
                    stop_workloads()
                    sleep 5
                    plot_results("LLC", "llc_results.csv")
                    stop_wca()
                }
            }
        }
        stage("Run Memory Bandwidth experiment") {
            when {
                expression { return params.MB }
            }
            environment {
                MESOS_EXPECTED_TASKS = -1
                MIN_RECALL = -1
                MIN_PRECISION = -1
                BUILD_SCENARIO = "mbw"
                LABELS="{additional_labels: {build_number: \"${BUILD_NUMBER}\", build_node_name: \"${NODE_NAME}\", build_commit: \"${GIT_COMMIT}\", build_scenario: \"$BUILD_SCENARIO\"}}"
                SCENARIO_INVENTORY='prm/demo_scenarios/complex_mbw.0/inventory.yaml'
            }


            steps {
                reconfigure_wca()
                start_wca()
                echo 'Start baseline workloads.'
                start_workloads("specjbb,tensorflow_benchmark_prediction,tensorflow_benchmark_train,cassandra_stress", "${MBW_BASELINE_SLEEP}")
                echo 'Start contender workload.'
                start_workloads("tensorflow_benchmark_prediction", "${MBW_CONTENDER_SLEEP}")
                calculate_precision()
                stop_workloads()
            }
            post {
                always {
                    stop_workloads()
                    sleep 5
                    plot_results('MBW', 'mbw_results.csv')
                    stop_wca()
                }
            }
        }
    }
}

def plot_results(scenario, csv_file) {
    echo 'Plot ${scenario} results...'
    plot(csvFileName: csv_file,
         style: 'line',
         csvSeries: [
            [
                displayTableFlag: false,
                exclusionValues: '',
                inclusionFlag: 'OFF',
                file: 'prm/test_results.csv',
                url: ''
            ]
         ],
         group: 'PRM performance v4',
         title: '${scenario} complex scenario',
         numBuilds: '5',)
    echo 'Storing results.'
    junit 'prm/unit_results.xml'
}

def reconfigure_wca() {
    echo 'Reconfigure wca...'
    sh 'cp ${WORKSPACE}/prm/demo_scenarios/common/wca_config.yml ${WORKSPACE}/prm/demo_scenarios/common/wca_config.yml.tmp'
    sh 'sudo cp ${WORKSPACE}/prm/demo_scenarios/common/wca.service /etc/systemd/system/wca.service'
    sh 'sudo systemctl daemon-reload'
    contentReplace(
        configs: [
            fileContentReplaceConfig(
                configs: [
                    fileContentReplaceItemConfig( search: 'BUILD_COMMIT', replace: "${GIT_COMMIT}", matchCount: 0),
                    fileContentReplaceItemConfig( search: 'BUILD_NUMBER', replace: "${BUILD_NUMBER}", matchCount: 0),
                    fileContentReplaceItemConfig( search: 'BUILD_SCENARIO', replace: "${BUILD_SCENARIO}", matchCount: 0)],
                fileEncoding: 'UTF-8',
                filePath: "${WORKSPACE}/prm/demo_scenarios/common/wca_config.yml.tmp")])
    sh'''
    sudo mkdir -p /var/lib/wca/
    sudo mkdir -p /etc/wca
    sudo cp ${WORKSPACE}/prm/demo_scenarios/common/threshold.json /var/lib/wca/
    sudo cp ${WORKSPACE}/prm/demo_scenarios/common/workload.json /var/lib/wca/
    sudo cp ${WORKSPACE}/prm/demo_scenarios/common/wca_config.yml.tmp /etc/wca/wca_config.yml
    sudo cp ${WORKSPACE}/prm/dist/wca-prm.pex /usr/bin/wca.pex
    '''
}

def start_wca() {
    '''
    echo 'Restart wca...'
    sudo systemctl restart wca
    sleep 5
    sh 'sudo systemctl status wca'
    '''
}

def start_workloads(tags, sleep_time) {
    dir('prm/workload-collocation-agent/workloads'){
        sh '''ansible-playbook  ${EXTRA_ANSIBLE_PARAMS}  -i ${WORKSPACE}/${SCENARIO_INVENTORY} -i ${WORKSPACE}/${INVENTORY} --tags=${tags} -e "${LABELS}" ${WORKSPACE}/${PLAYBOOK}'''
        sleep sleep_time
    }

}

def calculate_precision() {
    dir('prm'){
        echo 'Calculate precision and recall...'
        sh "PYTHONPATH=. pipenv run pytest tests/e2e/test_calculate_accuracy.py --junitxml=unit_results.xml --junit-prefix=${BUILD_SCENARIO} --log-level=debug --log-cli-level=debug -v"
    }
}

def stop_workloads() {
    echo 'Stop all workloads...'
    sh 'ansible-playbook  ${EXTRA_ANSIBLE_PARAMS}  -i ${WORKSPACE}/${INVENTORY} --tags=clean_jobs ${WORKSPACE}/${PLAYBOOK}'
}

def stop_wca() {
    echo 'Stop wca...'
    sh 'sudo systemctl stop wca'
}

def build_pex() {
    dir('prm') {
        sh('make venv')
        sh('make check')
        sh('make package')
        }
}
