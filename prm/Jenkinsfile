pipeline {
    agent any
    environment {
        PLAYBOOK='prm/owca/workloads/run_workloads.yaml'
        INVENTORY='prm/demo_scenarios/common/inventory.yaml'
        LLC_INVENTORY='prm/demo_scenarios/complex_llc.0/inventory.yaml'
        MEMBW_INVENTORY='prm/demo_scenarios/complex_mbw.0/inventory.yaml'
        PROMETHEUS='http://100.64.176.12:9090' 
        LLC_LABELS="{additional_labels: {build_number: \"${BUILD_NUMBER}\", build_node_name: \"${NODE_NAME}\", build_commit: \"${GIT_COMMIT}\", scenario: \"complex_llc.0\"}}"
        MBW_LABELS="{additional_labels: {build_number: \"${BUILD_NUMBER}\", build_node_name: \"${NODE_NAME}\", build_commit: \"${GIT_COMMIT}\", scenario: \"complex_mbw.0\"}}"
    }
    options {
        disableConcurrentBuilds()
        timeout(time: 75, unit: 'MINUTES')
    }
    stages {
        /*
        stage("Prepare venv") {
            steps {
                sh'''
                cd prm
                make venv
                '''
            }
        }
        stage("Run flake8 on PRM") {
            steps {
                sh'''
                cd prm
                make flake8
                '''
            }
        }
        stage("Run PRM unit tests") {
            steps {
                sh'''
                cd prm
                make unit
                '''
            }
        }
        stage("Build owca-prm.pex") {
            steps {
                sh'''
                cd prm
                make package
                '''
                stash(name: "owca-prm", includes: "prm/dist/**")
                archiveArtifacts(artifacts: "prm/dist/**")
            }
            post {
                always {
                    sh '''
                    rm -fr prm/dist
                    '''
                }
            }
        }
        */
        stage("Prepare aurora cluster") {
            steps {
                sh'''
                mkdir -p ${HOME}/.aurora
                cp ${WORKSPACE}/prm/demo_scenarios/common/aurora-clusters.json  ${HOME}/.aurora/clusters.json
                '''
            }
        }
        stage("Run LLC experiment") {
            steps {
                sh '''
                cd prm/owca/workloads
                ansible-inventory -v -i ${WORKSPACE}/${LLC_INVENTORY} -i ${WORKSPACE}/${INVENTORY} -y --list all
                ansible-playbook -v -i ${WORKSPACE}/${LLC_INVENTORY} -i ${WORKSPACE}/${INVENTORY} --tags=twemcache_mutilate,redis_rpc_perf,cassandra_stress--cassandra -e "${LLC_LABELS}" ${WORKSPACE}/${PLAYBOOK}
                sleep 60
                ansible-playbook -v -i ${WORKSPACE}/${LLC_INVENTORY} -i ${WORKSPACE}/${INVENTORY} --tags=cassandra_stress--stress -e "${LLC_LABELS}" ${WORKSPACE}/${PLAYBOOK}
                sleep 30
                pipenv run python calculate_accuracy.py --build_number ${BUILD_NUMBER} --prometheus ${PROMETHEUS}
                '''
            }
            post {
                always {
                    sh '''
                    ansible-playbook -v -i ${WORKSPACE}/${LLC_INVENTORY} -i ${WORKSPACE}/${INVENTORY} --tags=clean_jobs ${WORKSPACE}/${PLAYBOOK}
                    rm -fr ${HOME}/.aurora/
                    '''
                }
            }
        }
        /*
        stage("Run Memory Bandwidth experiment") {
            steps {
                sh '''
                mkdir -p ${HOME}/.aurora
                cp  ${AURORA_CLI_CONFIGURATION} ${HOME}/.aurora/clusters.json
                ansible-playbook -vvv -l ${PRM_SUT} -i ${WORKSPACE}${MEMBW_INVENTORY} -i ${DEFAULT_INVENTORY} --tags=specjbb,tensorflow_benchmark_prediction,tensorflow_benchmark_train,cassandra_stress -e "${MBW_LABELS}" ${WORKSPACE}${PLAYBOOK}
                sleep 1800
                ansible-playbook -vvv -l ${PRM_SUT} -i ${WORKSPACE}${MEMBW_INVENTORY} -i ${DEFAULT_INVENTORY} --tags=tensorflow_benchmark_prediction -e "${MBW_LABELS}" ${WORKSPACE}${PLAYBOOK}
                sleep 300
                '''
            }
            post {
                always {
                    sh '''
                    ansible-playbook -vvv -l ${PRM_SUT} -i ${DEFAULT_INVENTORY} --tags=clean_jobs ${WORKSPACE}${PLAYBOOK}
                    rm -fr ${HOME}/.aurora/
                    '''
                }
            }
        }
        */
    }
}
